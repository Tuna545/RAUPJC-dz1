using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RAPUJC_dz1._1
{
    
    public class IntegerList : IIntegerList
    {
        private int[] _internalStorage;
        private int currentLenght=0;

        public IntegerList()
        {
            _internalStorage = new int[4];
        }

        public IntegerList(int initialSize)
        {
            if (initialSize > 0)
            {
                _internalStorage = new int[initialSize];
            }
            else
            {
                Console.WriteLine("Please provide a value greater than zero");
                System.Environment.Exit(1);
            }

        }

        /// <summary>
        /// Gets the count.
        /// </summary>
        /// <value>
        /// The count.
        /// </value>
        public int Count
        {
            get
            {
                return currentLenght;
            }
        }

        /// <summary>
        /// Adds the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        public void Add(int item)
        {
            if (_internalStorage.Length == currentLenght)
            {
                int[] temp = _internalStorage;
                _internalStorage = new int[2 * currentLenght]; 
                for (int i = 0; i < currentLenght; i++)
                    _internalStorage[i] = temp[i];
            }
            for(int i = 0; i < _internalStorage.Length; i++)
            {
                if (_internalStorage[i] == 0)
                {
                    _internalStorage[i] = item;
                    currentLenght++;
                    return;
                }
            }
            
        }

        /// <summary>
        /// Clears this instance.
        /// </summary>
        public void Clear()
        {
            _internalStorage = new int[_internalStorage.Length];
            currentLenght = 0;
        }

        /// <summary>
        /// Determines whether it contains the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>
        ///   <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
        /// </returns>
        public bool Contains(int item)
        {
            for(int i = 0; i < _internalStorage.Length; i++)
            {
                if (_internalStorage[i] == item) return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the element with index.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns></returns>
        /// <exception cref="IndexOutOfRangeException">index is out of range</exception>
        public int GetElement(int index)
        {
            if (index < currentLenght && index >= 0)
                return _internalStorage[index];
            else
            {
                 throw new IndexOutOfRangeException("index is out of range");  //baƒçen exeption
            }

        }

        /// <summary>
        /// Indexes of the item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        public int IndexOf(int item)
        {
            for (int i = 0; i < _internalStorage.Length; i++)
            {
                if (_internalStorage[i] == item) return i;
            }
            return -1;
        }

        /// <summary>
        /// Removes the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        public bool Remove(int item)
        {
            int index=IndexOf(item);
            return RemoveAt(index);
        }

        /// <summary>
        /// Removes item at index.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns></returns>
        public bool RemoveAt(int index)
        {
            if (index < currentLenght && index >= 0)
            {
                currentLenght--;
                for (int i = index; i < _internalStorage.Length-1; i++)
                    _internalStorage[i] = _internalStorage[i+1];
                return true;
            }
            else return false;
        }

        public void ListExample(IIntegerList listOfIntegers)
        {
            listOfIntegers.Add(1); // [1]
            listOfIntegers.Add(2); // [1 ,2]
            listOfIntegers.Add(3); // [1 ,2 ,3]
            listOfIntegers.Add(4); // [1 ,2 ,3 ,4]
            listOfIntegers.Add(5); // [1 ,2 ,3 ,4 ,5]
            listOfIntegers.RemoveAt(0); // [2 ,3 ,4 ,5]
            listOfIntegers.Remove(5); //[2 ,3 ,4]
            Console.WriteLine(listOfIntegers.GetElement(2));
        Console.WriteLine ( listOfIntegers.Count ); // 3
        Console.WriteLine ( listOfIntegers.Remove (100) ); // false
        Console.WriteLine ( listOfIntegers.RemoveAt (5)); // false
        listOfIntegers.Clear (); // []
        Console.WriteLine ( listOfIntegers.Count ); // 0
            
        }

         public static void Main()
        {
            IntegerList lista = new IntegerList(0);
            try
            {
                lista.ListExample(lista);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
